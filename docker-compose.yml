services:
  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blog-application
    ports:
      - "27017:27017"  
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
  redis:
    image: redis:latest
    container_name: my_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_volume:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: [
      "redis-server",
      "--maxmemory", "100mb",
      "--maxmemory-policy", "allkeys-lfu",
      "--appendonly", "yes",
      "--requirepass", "${REDIS_PASSWORD}"
    ]
      
  backend:  # This defines a service named "backend"
    build: 
      context: ./
      dockerfile: DockerFile
    restart: always  # Ensures the container restarts automatically if it crashes or the system reboots
    volumes:
      - .:/Backend_blog_application
      - node_modules_volume:/Backend_blog_application/node_modules
    command: ["npx", "nodemon", "--legacy-watch", "server.js"]
    env_file:
      - .env  # Loads environment variables from the .env file
    ports:
      - "${PORT}:${PORT}"  # Maps the port dynamically based on the .env file value
    depends_on:
      - mongodb  # Ensures the backend starts only after MongoDB is up

volumes:
  mongo_data:
  mongo_config:
  redis_volume:
  node_modules_volume: